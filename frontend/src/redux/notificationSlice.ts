import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

interface Notification {
  id: string;
  message: string;
  timestamp: string;
  is_read: boolean;
}

interface NotificationState {
  notifications: Notification[];
  loading: boolean;
  error: string | null;
}

const initialState: NotificationState = {
  notifications: [],
  loading: false,
  error: null,
};

// Async thunk to fetch notifications from the API
export const fetchNotifications = createAsyncThunk(
  'notifications/fetchNotifications',
  async () => {
    const response = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/api/notifications`
    );
    if (!response.ok) {
      throw new Error('Failed to fetch notifications');
    }

    const data = await response.json();

    return data;
  }
);

// Async thunk to mark all notifications as read
export const markAllNotificationsAsRead = createAsyncThunk(
  'notifications/markAllNotificationsAsRead',
  async () => {
    const response = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/api/notifications/mark-as-read`,
      {
        method: 'PATCH',
      }
    );
    if (!response.ok) {
      throw new Error('Failed to mark all notifications as read');
    }
  }
);

// Async thunk to add a new notification
export const addNotificationThunk = createAsyncThunk(
  'notifications/addNotification',
  async (newNotification: Omit<Notification, 'id'>) => {
    // Make API call to add the notification
    const response = await fetch(
      `${import.meta.env.VITE_API_BASE_URL}/api/notifications`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newNotification),
      }
    );

    if (!response.ok) {
      throw new Error('Failed to add notification');
    }
    const data = await response.json();

    // If the request is successful, return the new notification (including id generated by the backend)
    return data;
  }
);

// Slice for notifications
const notificationSlice = createSlice({
  name: 'notifications',
  initialState,
  reducers: {
    markNotificationAsRead: (state, action: PayloadAction<string>) => {
      const notification = state.notifications.find(
        (n) => n.id === action.payload
      );
      if (notification) {
        notification.is_read = true;
      }
    },
    setNotifications: (state, action: PayloadAction<Notification[]>) => {
      state.notifications = action.payload;
    },
    addNotification: (state, action: PayloadAction<Notification>) => {
      state.notifications.unshift(action.payload); // Adds new notification at the beginning
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchNotifications.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchNotifications.fulfilled, (state, action) => {
        state.loading = false;
        state.notifications = action.payload;
      })
      .addCase(fetchNotifications.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message || 'Failed to fetch notifications';
      })
      .addCase(markAllNotificationsAsRead.fulfilled, (state) => {
        state.notifications.forEach((notification) => {
          notification.is_read = true;
        });
      })
      // Handle the fulfilled state of the addNotificationThunk
      .addCase(addNotificationThunk.fulfilled, (state, action) => {
        // Add the new notification to the state
        state.notifications.unshift(action.payload); // Add new notification at the beginning
      });
  },
});

export const { markNotificationAsRead, setNotifications, addNotification } =
  notificationSlice.actions;

export default notificationSlice.reducer;
